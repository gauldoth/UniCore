需求
	使用简单,接入代码简单.
	方便调试程序时使用,提供调试程序用的相关功能.
	能够自己定义将日志记录到哪里,能记录到文件,输出到调试器,或者通过网络发送(输出源).
	日志分组
		日志的名字指定了某个组别的日志,例如"帐号"组专门用来记录帐号相关日志,"验证"组专门用来记录验证信息.
			例如,
			UWARN("帐号")<<"帐号登录成功.";
			UERROR("验证")<<"开始进行验证.";
	日志类型
		调试,警告,错误等类别.
	按名字组指定输出源,不同组可以输出到不同的输出源.
	能够在编译时和运行时去除某些输出信息.
	增加一个类型,专门用于一些不希望被人看到的,希望在编译时去除的信息.
	减少错误,考虑写一个测试程序.
	
功能
	流方式输出,支持标准库流中的操纵符.
	能输出到不同的输出源.
		假如分组有自定义输出源,则使用自定义的输出源.
		否则使用无分组""的输出源.
		输出到调试器(默认).
		输出到文件.
		输出到每日日志.
	日志分组.
		按组设置输出源.
		按组过滤日志.(仅考虑运行时)
	日志类型
		按类型过滤.(编译时和运行时)
			编译时是全局过滤,要么指定类别的全部信息都过滤掉,要么指定类别全部信息都显示.
			运行时暂时也为全局过滤.
		类型之间不存在等级关系,这样逻辑更为清晰简单.
	辅助调试功能
		lasterr操纵符 输出最后的错误信息.
		delim操纵符 自动为输出添加分隔符.(概念更加清晰)
		dumpmem操纵符 Dump内存.
		hexdisp操纵符 16进制显示数字.
		
实现
	日志过滤
	注册输出源
		registerAppender(appenderName,appender);
		unregisterAppender(appenderName);
	配置全部日志的输出源
		addAppender(appenderName);
		removeAppender(appenderName);
	配置指定日志的输出源.
		addAppender(name,appenderName);
		removeAppender(name,appenderName);